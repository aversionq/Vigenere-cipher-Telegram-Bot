import telebot
import cfg
from telebot import types


bot = telebot.TeleBot(cfg.TOKEN)
alphabet_high_ru = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
alphabet_low_ru = alphabet_high_ru.lower()
alphabet_ru = alphabet_low_ru
alphabet_eng = 'abcdefghijklmnopqrstuvwxyz'
string_cipher = []
choice = ''


def ToViginere(string , key , alphabet_):
    string_new = ''
    key_repl = key.replace(' ','')
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
    if len(string) > len(key_repl):
        to_time = len(string) // len(key_repl)
        to_div = len(string) % len(key_repl)
        new_key = key_repl*to_time + key_repl[:to_div]
    elif len(key_repl) > len(string):
        new_key = key_repl[:len(string)]
    else:
        new_key = key_repl
    t = 0
    new_key = new_key.lower()
    string = string.lower()
    # –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(len(new_key)):
        if string[i] in alphabet_:
            ind_to_change = int(alphabet_.index(string[i])) + int(alphabet_.index(new_key[i + t]))
            if ind_to_change < len(alphabet_):
                letter_change = ind_to_change
            else:
                letter_change = ind_to_change - len(alphabet_)
            string_new += alphabet_[letter_change]
        else:
            t -= 1
            string_new += string[i]
    return string_new


def FromViginere(string , key , alphabet_):
    string_new = ''
    key_repl = key.replace(' ','')
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
    if len(string) > len(key_repl):
        to_time = len(string) // len(key_repl)
        to_div = len(string) % len(key_repl)
        new_key = key_repl*to_time + key_repl[:to_div]
    elif len(key_repl) > len(string):
        new_key = key_repl[:len(string)]
    else:
        new_key = key_repl
    t = 0
    new_key = new_key.lower()
    string = string.lower()
    # –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(len(new_key)):
        if string[i] in alphabet_:
            ind_to_change = int(alphabet_.index(string[i])) - int(alphabet_.index(new_key[i + t]))
            if ind_to_change < len(alphabet_):
                letter_change = ind_to_change
            else:
                letter_change = ind_to_change - len(alphabet_)
            string_new += alphabet_[letter_change]
        else:
            t -= 1
            string_new += string[i]
    return string_new


@bot.message_handler( commands = ['start'])
def welcome_message(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—à—å—é —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞. /help - –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏')


@bot.message_handler(commands = ['help'])
def help_message(message):
    bot.send_message(message.chat.id, '/toviginere - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞' + '\n' + '/fromviginere - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞')


@bot.message_handler(commands = ['toviginere'])
def text_to_viginere(message):
    global choice
    choice = message.text
    language_choose = types.ReplyKeyboardMarkup()
    language_choose.row('üá¨üáß' , 'üá∑üá∫')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é', reply_markup=language_choose)


@bot.message_handler(commands = ['fromviginere'])
def text_from_viginere(message):
    global choice
    choice = message.text
    language_choose1 = types.ReplyKeyboardMarkup()
    language_choose1.row('üá¨üáß' , 'üá∑üá∫')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é', reply_markup=language_choose1)


@bot.message_handler(content_types = ['text'])
def cipher(message):
    global choice
    global alphabet_to_use
    if choice == '/toviginere':
        if message.text == 'üá∑üá∫':
            alphabet_to_use = alphabet_ru
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
        elif message.text == 'üá¨üáß':
            alphabet_to_use = alphabet_eng
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
        else:
            string_cipher.append(message.text)
            if len(string_cipher) < 2:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á')
            else:
                answer = ToViginere(string_cipher[0], string_cipher[1], alphabet_to_use)
                bot.send_message(message.chat.id, '–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏: ' + str(string_cipher[0]) +'\n' + '–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ' + str(answer))
                string_cipher.clear()
                alphabet_to_use = ''
    elif choice == '/fromviginere':
        if message.text == 'üá∑üá∫':
            alphabet_to_use = alphabet_ru
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
        elif message.text == 'üá¨üáß':
            alphabet_to_use = alphabet_eng
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
        else:
            string_cipher.append(message.text)
            if len(string_cipher) < 2:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á')
            else:
                answer = FromViginere(string_cipher[0], string_cipher[1], alphabet_to_use)
                bot.send_message(message.chat.id, '–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏: ' + str(string_cipher[0]) +'\n' + '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ' + str(answer))
                string_cipher.clear()
                alphabet_to_use = ''


bot.polling(none_stop=True)